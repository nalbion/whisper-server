# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from whisper_server.proto import whisper_server_pb2 as whisper__server__pb2


class WhisperServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.loadModel = channel.unary_unary(
                '/org.openasr.WhisperServer/loadModel',
                request_serializer=whisper__server__pb2.LoadModelRequest.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.selectAudioInputDevice = channel.unary_unary(
                '/org.openasr.WhisperServer/selectAudioInputDevice',
                request_serializer=whisper__server__pb2.AudioInputDeviceSelection.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.setDecodingOptions = channel.unary_unary(
                '/org.openasr.WhisperServer/setDecodingOptions',
                request_serializer=whisper__server__pb2.DecodingOptions.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.setPrompt = channel.unary_unary(
                '/org.openasr.WhisperServer/setPrompt',
                request_serializer=whisper__server__pb2.Prompt.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.setPrefix = channel.unary_unary(
                '/org.openasr.WhisperServer/setPrefix',
                request_serializer=whisper__server__pb2.Prefix.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.startRecognition = channel.unary_unary(
                '/org.openasr.WhisperServer/startRecognition',
                request_serializer=whisper__server__pb2.EmptyRequest.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.stopRecognition = channel.unary_unary(
                '/org.openasr.WhisperServer/stopRecognition',
                request_serializer=whisper__server__pb2.EmptyRequest.SerializeToString,
                response_deserializer=whisper__server__pb2.EmptyResponse.FromString,
                )
        self.waitForSpeech = channel.unary_unary(
                '/org.openasr.WhisperServer/waitForSpeech',
                request_serializer=whisper__server__pb2.EmptyRequest.SerializeToString,
                response_deserializer=whisper__server__pb2.WhisperSimpleOutput.FromString,
                )


class WhisperServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def loadModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selectAudioInputDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDecodingOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPrompt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setPrefix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRecognition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRecognition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def waitForSpeech(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WhisperServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'loadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.loadModel,
                    request_deserializer=whisper__server__pb2.LoadModelRequest.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'selectAudioInputDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.selectAudioInputDevice,
                    request_deserializer=whisper__server__pb2.AudioInputDeviceSelection.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'setDecodingOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.setDecodingOptions,
                    request_deserializer=whisper__server__pb2.DecodingOptions.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'setPrompt': grpc.unary_unary_rpc_method_handler(
                    servicer.setPrompt,
                    request_deserializer=whisper__server__pb2.Prompt.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'setPrefix': grpc.unary_unary_rpc_method_handler(
                    servicer.setPrefix,
                    request_deserializer=whisper__server__pb2.Prefix.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'startRecognition': grpc.unary_unary_rpc_method_handler(
                    servicer.startRecognition,
                    request_deserializer=whisper__server__pb2.EmptyRequest.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'stopRecognition': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRecognition,
                    request_deserializer=whisper__server__pb2.EmptyRequest.FromString,
                    response_serializer=whisper__server__pb2.EmptyResponse.SerializeToString,
            ),
            'waitForSpeech': grpc.unary_unary_rpc_method_handler(
                    servicer.waitForSpeech,
                    request_deserializer=whisper__server__pb2.EmptyRequest.FromString,
                    response_serializer=whisper__server__pb2.WhisperSimpleOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.openasr.WhisperServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WhisperServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def loadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/loadModel',
            whisper__server__pb2.LoadModelRequest.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def selectAudioInputDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/selectAudioInputDevice',
            whisper__server__pb2.AudioInputDeviceSelection.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setDecodingOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/setDecodingOptions',
            whisper__server__pb2.DecodingOptions.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setPrompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/setPrompt',
            whisper__server__pb2.Prompt.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setPrefix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/setPrefix',
            whisper__server__pb2.Prefix.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startRecognition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/startRecognition',
            whisper__server__pb2.EmptyRequest.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRecognition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/stopRecognition',
            whisper__server__pb2.EmptyRequest.SerializeToString,
            whisper__server__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def waitForSpeech(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.openasr.WhisperServer/waitForSpeech',
            whisper__server__pb2.EmptyRequest.SerializeToString,
            whisper__server__pb2.WhisperSimpleOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
